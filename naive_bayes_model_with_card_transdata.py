# -*- coding: utf-8 -*-
"""Naive Bayes model with card_transdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tv8daI352bg5jWIgv4fxg1aHBXFw1Qkw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.tree import export_graphviz
import graphviz
from sklearn.metrics import accuracy_score

data=pd.read_csv("card_transdata.csv")

data=data.head(10000)

data.tail()

data.info

data.describe

data.shape

data.dtypes

pd.unique(data.used_pin_number)

data.nunique()

x=data.online_order
y=data.fraud
plt.scatter(x,y)

data.plot.area()

data.boxplot(figsize=(30,15))

data.isna().sum()

plt.figure(figsize=(10,10))
plotnumber=1
for col in feature.columns:
  if plotnumber<=8:
    ax=plt.subplot(3,3,plotnumber)
    sns.boxplot(data[col])
    plt.xlabel(col,fontsize=15)
  plotnumber+=1
plt.tight_layout()
plt.show()

import missingno as msno
msno.bar(data)
plt.show()

plt.pie(data.fraud.head(100))
plt.show()

plt.boxplot(data.online_order)

plt.plot(data.online_order.head(100),data.fraud.head(100))

feature=data.drop('fraud',axis=1)
target=data.fraud

#DECISION TREE
from sklearn.tree import DecisionTreeClassifier

X_train,X_test,Y_train,Y_test=train_test_split(feature,target,test_size=0.2,random_state=0)

a=StandardScaler()
X_train=a.fit_transform(X_train)
X_test=a.transform(X_test)

classfier=DecisionTreeClassifier(criterion="entropy",random_state=0)
classfier.fit(X_train,Y_train)

Y_pred=classfier.predict(X_test)

cm=confusion_matrix(Y_test,Y_pred)
cm

accuracy_score(Y_test,Y_pred)

#NAIVE BAYES
from sklearn.naive_bayes import GaussianNB

clf=GaussianNB()
clf.fit(X_train,Y_train)
Y_pred=clf.predict(X_test)
cm=confusion_matrix(Y_test,Y_pred)
cm

accuracy_score(Y_test,Y_pred)

